-------------------- Architectural differences: Kafka vs. RabbitMQ --------------------

RabbitMQ and Apache Kafka allow producers to send messages to consumers. Producers are applications that publish
information, while consumers are applications that subscribe to and process information.

Producers and consumers interact differently in RabbitMQ and Kafka. In RabbitMQ, the producer sends and monitors if the message 
reaches the intended consumer. On the other hand, Kafka producers publish messages to the queue regardless of whether consumers 
have retrieved them.

You can think of RabbitMQ as a post office that receives mail and delivers it to the intended recipients. Meanwhile, Kafka is similar 
to a library, which organizes messages on shelves with different genres that producers publish. 
Then, consumers read the messages from the respective shelves and remember what they have read. 


-------------------- RabbitMQ architectural approach -----------------

A RabbitMQ broker allows for low latency and complex message distributions with the following components:

    An exchange receives messages from the producer and determines where they should be routed to
    A queue is storage that receives messages from an exchange and sends them to consumers
    A binding is a path that connects an exchange and a broker

In RabbitMQ, a routing key is a message attribute that is used to route messages from an exchange to a specific queue. 
When a producer sends a message to an exchange, it includes a routing key as part of the message. The exchange then uses this 
routing key to determine which queue the message should be delivered to.


--------------- Kafka architectural approach --------------

A Kafka cluster provides high-throughput stream event processing with a more complex architecture. These are some key Kafka 
components:

    A Kafka broker is a Kafka server that allows producers to stream data to consumers. The Kafka broker contains topics and their 
respective partitions. 
    A topic is data storage that groups similar data in a Kafka broker. 
    A partition is smaller data storage within a topic that consumers subscribe to. 
    ZooKeeper is special software that manages the Kafka clusters and partitions to provide fault-tolerant streaming. ZooKeeper has 
recently been replaced with the Apache Kafka Raft (KRaft) protocol.

Producers in Kafka assign a message key for each message. Then, the Kafka broker stores the message in the leading partition of 
that specific topic. KRaft protocol uses consensus algorithms to determine the leading partition. 



------------------------- How do Kafka and RabbitMQ handle messaging differently? ----------------------------------

RabbitMQ and Apache Kafka move data from producers to consumers in different ways. RabbitMQ is a general-purpose message 
broker that prioritizes end-to-end message delivery. Kafka is a distributed event streaming platform that supports the real-time 
exchange of continuous big data.

RabbitMQ and Kafka are designed for different use cases, which is why they handle messaging differently. Next, we discuss some 
specific differences.


------------------------ Message consumption ------------------------

In RabbitMQ, the broker ensures that consumers receive the message. The consumer application takes a passive role and waits for 
the RabbitMQ broker to push the message into the queue. For example, a banking application might wait for SMS alerts from the 
central transaction processing software.

Kafka consumers, however, are more proactive in reading and tracking information. As messages are added to physical log files, 
Kafka consumers keep track of the last message they've read and update their offset tracker accordingly. An offset tracker is a 
counter that increments after reading a message. With Kafka, the producer is not aware of message retrieval by consumers. 


------------- Message priority --------------

RabbitMQ brokers allow producer software to escalate certain messages by using the priority queue. Instead of sending messages with 
the first in, first out order, the broker processes higher priority messages ahead of normal messages. For example, a retail application 
might queue sales transactions every hour. However, if the system administrator issues a priority backup database message, the 
broker sends it immediately.

Unlike RabbitMQ, Apache Kafka doesn't support priority queues. It treats all messages as equal when distributing them to their 
respective partitions.

----------------- Message ordering ---------------

RabbitMQ sends and queues messages in a specific order. Unless a higher priority message is queued into the system, consumers 
receive messages in the order they were sent.

Meanwhile, Kafka uses topics and partitions to queue messages. When a producer sends a message, it goes into a specific topic and 
partition. Because Kafka does not support direct producer-consumer exchanges, the consumer pulls messages from the partition in 
a different order. 